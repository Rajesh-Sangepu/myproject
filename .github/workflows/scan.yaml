name: Security & Code Scan on PR

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  scan-all-os:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY || '' }}

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      # ----------------------
      # Trivy Secret Scan
      # ----------------------
      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scanners: secret
          format: table
          exit-code: '1'
          ignore-unfixed: true

      # ----------------------
      # Trivy Vulnerability Scan
      # ----------------------
      - name: Run Trivy repo scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: repo
          format: table
          exit-code: '1'
          ignore-unfixed: true

      # ----------------------
      # Python Code Scan
      # ----------------------
      - name: Check for Python files
        id: check-python
        shell: bash
        run: |
          if git ls-files '*.py' | grep -q '.'; then
            echo "python_found=true" >> $GITHUB_ENV
          else
            echo "python_found=false" >> $GITHUB_ENV
          fi

      - name: Python syntax check
        if: env.python_found == 'true'
        run: python -m py_compile $(git ls-files '*.py')
        shell: bash

      - name: Run Python files
        if: env.python_found == 'true'
        run: |
          for file in $(git ls-files '*.py'); do
            python "$file"
          done
        shell: bash

      - name: Install Flake8 & Bandit
        if: env.python_found == 'true'
        run: pip install flake8 bandit

      - name: Run Flake8 linting
        if: env.python_found == 'true'
        run: flake8 . --ignore=E302,E305,W391

      - name: Run Bandit security scan
        if: env.python_found == 'true'
        run: bandit -r . -ll -iii

      # ----------------------
      # Java Code Scan
      # ----------------------
      - name: Check for Java files
        id: check-java
        shell: bash
        run: |
          if git ls-files '*.java' | grep -q '.'; then
            echo "java_found=true" >> $GITHUB_ENV
          else
            echo "java_found=false" >> $GITHUB_ENV
          fi

      - name: Setup JDK
        if: env.java_found == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Compile & run Java files
        if: env.java_found == 'true'
        shell: bash
        run: |
          mkdir -p build || powershell -Command "New-Item -ItemType Directory -Force -Path build"
          for file in $(git ls-files '*.java'); do
            classname=$(basename "$file" .java)
            javac -d build "$file"
            java -cp build "$classname" || true
          done

      # ----------------------
      # Dependency-Check for Maven
      # ----------------------
      - name: Install OWASP Dependency-Check
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
            powershell -Command "Expand-Archive dependency-check.zip -DestinationPath dependency-check"
          else
            curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
            unzip dependency-check.zip -d dependency-check
          fi

      - name: Run Dependency-Check
        shell: bash
        run: |
          API_ARG=""
          if [ -n "$NVD_API_KEY" ]; then
            API_ARG="--nvdApiKey $NVD_API_KEY"
          fi

          if [ "$RUNNER_OS" == "Windows" ]; then
            dependency-check\bin\dependency-check.bat --project "My Maven Project" --scan . --format "HTML" --out dependency-check-report %API_ARG% --cveValidForHours 24 --noupdate || exit 0
          else
            ./dependency-check/dependency-check/bin/dependency-check.sh --project "My Maven Project" --scan . --format "HTML" --out dependency-check-report $API_ARG --cveValidForHours 24 --noupdate || true
          fi
