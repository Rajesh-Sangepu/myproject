name: Security & Code Scan on PR

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  # ----------------------
  # Secret Scan (Trivy)
  # ----------------------
  trivy-secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scanners: secret
          format: table
          exit-code: '1'
          ignore-unfixed: true

  # ----------------------
  # Vulnerability/config Scan (Trivy)
  # ----------------------
  trivy-vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy repo scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: repo
          format: table
          exit-code: '1'
          ignore-unfixed: true

  # ----------------------
  # Python Code Scan
  # ----------------------
  python-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for Python files
        id: check-python
        run: |
          if find . -name "*.py" | grep -q .; then
            echo "python_found=true" >> $GITHUB_ENV
          else
            echo "python_found=false" >> $GITHUB_ENV
      - name: Python syntax check
        if: env.python_found == 'true'
        run: python -m py_compile $(find . -name "*.py")
      - name: Run Python files
        if: env.python_found == 'true'
        run: |
          set -e
          for file in $(find . -name "*.py"); do
            echo "Running $file"
            python "$file"
          done
      - name: Install Flake8 & Bandit
        if: env.python_found == 'true'
        run: pip install flake8 bandit
      - name: Run Flake8 linting (ignore blank line rules)
        if: env.python_found == 'true'
        run: flake8 . --ignore=E302,E305,W391
      - name: Run Bandit security scan
        if: env.python_found == 'true'
        run: bandit -r . -ll -iii

  # ----------------------
  # Java Code Scan (Plain Java)
  # ----------------------
  java-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for Java files
        id: check-java
        run: |
          if find . -name "*.java" | grep -q .; then
            echo "java_found=true" >> $GITHUB_ENV
          else
            echo "java_found=false" >> $GITHUB_ENV
      - name: Set up JDK
        if: env.java_found == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Compile and run each Java file individually
        if: env.java_found == 'true'
        run: |
          mkdir -p build
          for file in $(find . -name "*.java"); do
            classname=$(basename "$file" .java)
            echo "Compiling $file"
            javac -d build "$file"
            echo "Running $classname"
            java -cp build "$classname" || true
          done

  # ----------------------
  # Maven Dependency Vulnerability Scan (pom.xml)
  # ----------------------
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install OWASP Dependency-Check v12.1.0
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check.zip -d dependency-check

      - name: Run Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "My Maven Project" \
            --scan . \
            --format "HTML" \
            --out dependency-check-report \
            --failOnCVSS 7 \
            --nvdApiKey $NVD_API_KEY
