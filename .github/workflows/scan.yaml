name: Security & Code Scan on PR

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:

  # ----------------------
  # Trivy Secret Scan
  # ----------------------
  trivy-secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scanners: secret
          format: json
          output: trivy-secret-results.json
          exit-code: '1'

  # ----------------------
  # Trivy Vulnerability Scan
  # ----------------------
  trivy-vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy repo scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: repo
          format: json
          output: trivy-vuln-results.json
          exit-code: '0'

      - name: Fail based on severity & fix status
        run: |
          set -e
          echo "Checking Trivy vulnerabilities..."
          jq -e '
            .Results[]?.Vulnerabilities[] |
            select(
              (.Severity=="CRITICAL" or .Severity=="HIGH") or
              (.FixedVersion != null and .FixedVersion != "")
            )
          ' trivy-vuln-results.json > /dev/null && echo "❌ Failing due to HIGH/CRITICAL or fixable issues" && exit 1 || echo "✅ No blocking issues"

  # ----------------------
  # Python Code Scan
  # ----------------------
  python-code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Python files
        id: check-python
        run: |
          shopt -s globstar
          if ls **/*.py 1> /dev/null 2>&1; then
            echo "python_found=true" >> $GITHUB_ENV
          else
            echo "python_found=false" >> $GITHUB_ENV
          fi

      - name: Python syntax check
        if: env.python_found == 'true'
        run: python -m py_compile $(find . -name "*.py")

      - name: Install Flake8 & Bandit
        if: env.python_found == 'true'
        run: pip install flake8 bandit bandit-sarif-formatter

      - name: Run Flake8 linting
        if: env.python_found == 'true'
        run: flake8 . --ignore=E302,E305,W391

      - name: Run Bandit security scan
        if: env.python_found == 'true'
        run: bandit -r . -f json -o bandit-results.json || true

  # ----------------------
  # Java Code Scan
  # ----------------------
  java-code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Java files
        id: check-java
        run: |
          if find . -name "*.java" | grep -q .; then
            echo "java_found=true" >> $GITHUB_ENV
          else
            echo "java_found=false" >> $GITHUB_ENV
          fi

      - name: Setup JDK
        if: env.java_found == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SpotBugs via Maven
        if: env.java_found == 'true'
        run: |
          mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.4:spotbugs \
              -Dspotbugs.jsonOutput=true \
              -Dspotbugs.jsonOutputFile=spotbugs.json || true

  # ----------------------
  # Dependency-Check
  # ----------------------
  dependency-check:
    runs-on: ubuntu-latest
    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY || '' }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install OWASP Dependency-Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check.zip -d dependency-check

      - name: Run Dependency-Check
        run: |
          API_ARG=""
          if [ -n "$NVD_API_KEY" ]; then
            API_ARG="--nvdApiKey $NVD_API_KEY"
          fi
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "My Maven Project" \
            --scan . \
            --format "JSON" \
            --out dependency-check-report \
            $API_ARG \
            --cveValidForHours 24 \
            --noupdate || true

  # ----------------------
  # Generate JSON Summary
  # ----------------------
  generate-summary:
    runs-on: ubuntu-latest
    needs: [trivy-secret-scan, trivy-vuln-scan, python-code-scan, java-code-scan, dependency-check]
    if: always()
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare scan results folder
        run: |
          mkdir -p scan-results
          [ -f trivy-secret-results.json ] && mv trivy-secret-results.json scan-results/
          [ -f trivy-vuln-results.json ] && mv trivy-vuln-results.json scan-results/
          [ -f bandit-results.json ] && mv bandit-results.json scan-results/
          [ -f dependency-check-report/dependency-check-report.json ] && mv dependency-check-report/dependency-check-report.json scan-results/
          [ -f spotbugs.json ] && mv spotbugs.json scan-results/

      - name: Generate summary.json
        run: |
          python3 << 'EOF'
          import json, glob
          summary = {"results": []}
          for file in glob.glob("scan-results/*.json"):
              with open(file) as f:
                  data = json.load(f)
                  scanner = file.split("/")[-1].split(".")[0]
                  if scanner == "bandit":
                      for r in data.get("results", []):
                          summary["results"].append({
                              "scanner": "bandit",
                              "file": r.get("filename"),
                              "issue": r.get("issue_text"),
                              "severity": r.get("issue_severity"),
                              "confidence": r.get("issue_confidence"),
                              "fixed": False
                          })
                  elif scanner == "trivy" or scanner=="trivy-secret-results":
                      for r in data.get("Results", []):
                          for vuln in r.get("Vulnerabilities", []):
                              summary["results"].append({
                                  "scanner": "trivy",
                                  "file": vuln.get("PkgName"),
                                  "issue": vuln.get("VulnerabilityID"),
                                  "severity": vuln.get("Severity"),
                                  "fixed": vuln.get("FixedVersion") not in [None, ""]
                              })
                  elif scanner == "dependency-check-report":
                      for r in data.get("dependencies", []):
                          for vuln in r.get("vulnerabilities", []):
                              summary["results"].append({
                                  "scanner": "dependency-check",
                                  "file": r.get("fileName"),
                                  "issue": vuln.get("name"),
                                  "severity": vuln.get("severity"),
                                  "fixed": vuln.get("fixedIn") not in [None, ""]
                              })
                  elif scanner == "spotbugs":
                      for bug in data.get("BugCollection", {}).get("BugInstance", []):
                          summary["results"].append({
                              "scanner": "spotbugs",
                              "file": bug.get("Class", {}).get("ClassName"),
                              "issue": bug.get("Type"),
                              "severity": bug.get("Priority"),
                              "fixed": False
                          })
          with open("summary.json", "w") as out:
              json.dump(summary, out, indent=2)
          print("✅ JSON summary generated: summary.json")
          EOF
