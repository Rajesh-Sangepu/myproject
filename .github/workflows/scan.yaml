name: Security & Code Scan on PR

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:

  # ----------------------
  # Trivy Secret Scan
  # ----------------------
  trivy-secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scanners: secret
          format: sarif
          output: trivy-results.sarif
          exit-code: '1'

  # ----------------------
  # Trivy Vulnerability Scan
  # ----------------------
  trivy-vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: repo
          format: sarif
          output: trivy-vuln-results.sarif
          exit-code: '0'

      - name: Fail based on severity & fix status
        run: |
          set -e
          echo "Checking Trivy vulnerabilities..."
          jq -e '
            .runs[].results[] |
            select(
              (.level == "error" or .level == "warning") and
              (
                (.properties.fixed != null and .properties.fixed != "") or
                (.level == "error")
              )
            )
          ' trivy-vuln-results.sarif > /dev/null && echo "❌ Failing due to HIGH/CRITICAL or fixable issues" && exit 1 || echo "✅ No blocking issues"

  # ----------------------
  # Python Code Scan
  # ----------------------
  python-code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Python files
        id: check-python
        run: |
          shopt -s globstar
          if ls **/*.py 1> /dev/null 2>&1; then
            echo "python_found=true" >> $GITHUB_ENV
          else
            echo "python_found=false" >> $GITHUB_ENV
          fi

      - name: Python syntax check
        if: env.python_found == 'true'
        run: python -m py_compile $(find . -name "*.py")

      - name: Install Flake8 & Bandit
        if: env.python_found == 'true'
        run: pip install flake8 bandit bandit-sarif-formatter

      - name: Run Flake8 linting
        if: env.python_found == 'true'
        run: flake8 . --ignore=E302,E305,W391

      - name: Run Bandit security scan
        if: env.python_found == 'true'
        run: bandit -r . -f json -o bandit-results.json || true

      - name: Convert Bandit JSON to SARIF
        if: env.python_found == 'true'
        run: python -m bandit_sarif_formatter bandit-results.json bandit-results.sarif

  # ----------------------
  # Java Code Scan
  # ----------------------
  java-code-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Java files
        id: check-java
        run: |
          if find . -name "*.java" | grep -q .; then
            echo "java_found=true" >> $GITHUB_ENV
          else
            echo "java_found=false" >> $GITHUB_ENV
          fi

      - name: Setup JDK
        if: env.java_found == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SpotBugs via Maven
        if: env.java_found == 'true'
        run: |
          mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.4:spotbugs \
              -Dspotbugs.sarifOutput=true \
              -Dspotbugs.sarifOutputFile=spotbugs.sarif || true

  # ----------------------
  # Dependency-Check
  # ----------------------
  dependency-check:
    runs-on: ubuntu-latest
    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY || '' }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install OWASP Dependency-Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check.zip -d dependency-check

      - name: Run Dependency-Check
        run: |
          API_ARG=""
          if [ -n "$NVD_API_KEY" ]; then
            API_ARG="--nvdApiKey $NVD_API_KEY"
          fi
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "My Maven Project" \
            --scan . \
            --format "SARIF" \
            --out dependency-check-report \
            $API_ARG \
            --cveValidForHours 24 \
            --noupdate || true

      - name: Fail based on severity & fix status
        run: |
          set -e
          echo "Checking Dependency-Check vulnerabilities..."
          jq -e '
            .runs[].results[] |
            select(
              (.level == "error" or .level == "warning") and
              (
                (.properties.fixVersion != null and .properties.fixVersion != "") or
                (.level == "error")
              )
            )
          ' dependency-check-report/dependency-check-report.sarif > /dev/null && echo "❌ Failing due to HIGH/CRITICAL or fixable issues" && exit 1 || echo "✅ No blocking issues"

  # ----------------------
  # Security Summary & SARIF Upload
  # ----------------------
  security-summary:
    runs-on: ubuntu-latest
    needs: [trivy-secret-scan, trivy-vuln-scan, python-code-scan, java-code-scan, dependency-check]
    if: always()
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Git repository exists
        run: |
          if [ ! -d .git ]; then
            git init
            git remote add origin ${{ github.server_url }}/${{ github.repository }}
            git fetch --depth=1 origin ${{ github.sha }}
            git checkout FETCH_HEAD
          fi

      - name: Merge SARIF reports
        run: |
          files=()
          for f in trivy-results.sarif trivy-vuln-results.sarif bandit-results.sarif dependency-check-report/dependency-check-report.sarif spotbugs.sarif; do
            [ -f "$f" ] && files+=("$f")
          done

          if [ ${#files[@]} -gt 0 ]; then
            jq -s '{
              "version": "2.1.0",
              "runs": (.[].runs | add)
            }' "${files[@]}" > combined-security-report.sarif
          else
            echo '{"version":"2.1.0","runs":[]}' > combined-security-report.sarif

      - name: Print Security Summary
        run: |
          echo "🔒 Security Summary:"
          jq -r '
            .runs[].results[]?.level
          ' combined-security-report.sarif | sort | uniq -c | while read count level; do
            case $level in
              note) severity=LOW;;
              warning) severity=MEDIUM;;
              error) severity=HIGH/CRITICAL;;
            esac
            echo "  $severity : $count"
          done

      - name: Upload combined SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: combined-security-report.sarif
